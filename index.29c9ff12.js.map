{"mappings":"AAgEA,SAASA,EAAUC,GACjB,IAAIC,EAAI,EACJC,EAAIF,EAAOG,OAAS,EACpBC,EAAe,EACfC,EAAa,EAEjB,GACEL,EAAOG,QAAU,GACjBH,EAAO,GAAKA,EAAO,IACnBA,EAAO,GAAKA,EAAOA,EAAOG,OAAS,IACjB,IAAlBH,EAAOG,OAIP,OAFAG,QAAQC,IAAI,gBAAgBP,aAAgBK,GAErCA,EAGT,KAAOJ,EAAIC,GACLF,EAAOC,GAAKD,EAAOE,IACjBF,EAAOC,GAAKG,EAAcA,EAAeJ,EAAOC,GAC/CI,GAAcD,EAAeJ,EAAOC,GACzCA,GAAK,IAEDD,EAAOE,GAAKE,EAAcA,EAAeJ,EAAOE,GAC/CG,GAAcD,EAAeJ,EAAOE,GACzCA,GAAK,GAIT,OADAI,QAAQC,IAAI,UAAUP,cAAiBK,GAChCA,C,CAGTN,EAAU,CAAC,EAAG,EAAG,IACjBA,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAC7BA,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAC1BA,EAAU,CAAC,EAAG,EAAG,IACjBA,EAAU,CAAC,EAAG,IACdA,EAAU","sources":["src/index.js"],"sourcesContent":["// import * as bootstrap from 'bootstrap';\n// import  test from './json/cards.json';\n// import {\n//   Tooltip as Tooltip,\n//   Toast as Toast,\n//   Popover as Popover,\n// } from 'bootstrap';\n\n// const cards =()=>{\n//     console.log(test);\n//  const tester = test.map(el=>{\n//     const tt=`gsjfh ${el.id},fffgf ${el.description}`\n//     return tt\n// }\n//     )\n//     console.log(tester);\n// }\n\n// cards()\n\n// const loadGrain = function (levels) {\n//   let l = 0;\n//   let r = levels.length - 1;\n//   let currentLevel = 0;\n//   let totalGrain = 0;\n//   while (l < r) {\n//     if (levels[l] < levels[r]) {\n//       if (levels[l] > currentLevel) currentLevel = levels[l];\n//       else totalGrain += currentLevel - levels[l];\n//       l += 1;\n//     } else {\n//       if (levels[r] > currentLevel) currentLevel = levels[r];\n//       else totalGrain += currentLevel - levels[r];\n//       r -= 1;\n//     }\n//   }\n//   console.log(`test(${levels}) ---->`, totalGrain);\n//   return totalGrain;\n// };\n\n// loadGrain([4, 1, 3]);\n// loadGrain([2, 1, 5, 2, 7, 4, 10]);\n// loadGrain([2, 0, 1, 5, 2, 7]);\n// loadGrain([2, 4, 2]);\n// loadGrain([3, 7]);\n// loadGrain([]);\n\n//   let accom = [];\n\n//   const sumLvl = levels.reduce((pevLevels, levl) => {\n//     return (pevLevels += levl);\n//   }, 0);\n\n//   const maxLevel = Math.round(sumLvl / levels.length);\n\n//   levels\n//     .filter(lv => lv < maxLevel)\n//     .forEach(element => accom.push(maxLevel - element));\n\n//   maxAmountGrain = accom.reduce((pevLevels, levl) => (pevLevels += levl), 0);\n\n//   console.log(`test(${levels}) ---->`, maxAmountGrain);\n//   return maxAmountGrain;\n\nfunction loadGrain(levels) {\n  let l = 0;\n  let r = levels.length - 1;\n  let currentLevel = 0;\n  let totalGrain = 0;\n\n  if (\n    levels.length <= 2 ||\n    levels[0] < levels[1] ||\n    levels[1] > levels[levels.length - 1] ||\n    levels.length === 0\n  ) {\n    console.log(`early return(${levels})---->`, totalGrain);\n\n    return totalGrain;\n  }\n\n  while (l < r) {\n    if (levels[l] < levels[r]) {\n      if (levels[l] > currentLevel) currentLevel = levels[l];\n      else totalGrain += currentLevel - levels[l];\n      l += 1;\n    } else {\n      if (levels[r] > currentLevel) currentLevel = levels[r];\n      else totalGrain += currentLevel - levels[r];\n      r -= 1;\n    }\n  }\n  console.log(`return(${levels}) ---->`, totalGrain);\n  return totalGrain;\n}\n\nloadGrain([4, 1, 3]);\nloadGrain([2, 1, 5, 2, 7, 4, 10]);\nloadGrain([2, 0, 1, 5, 2, 7]);\nloadGrain([2, 4, 2]);\nloadGrain([3, 7]);\nloadGrain([]);\n"],"names":["$1f0dc3b9307be026$var$loadGrain","levels","l","r","length","currentLevel","totalGrain","console","log"],"version":3,"file":"index.29c9ff12.js.map"}